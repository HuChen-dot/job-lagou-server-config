server:
  port: 8780
  servlet:
    context-path: /lagoucode

spring:
  application:
    name: lagou-service-code
  datasource:
    url: jdbc:mysql://139.196.79.22:3306/test?serverTimezone=UTC&useSSL=false&characterEncoding=utf-8&autoReconnect=true
    username: root
    password: 123456
    #使用druid连接池
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      # 下面为连接池的补充设置，应用到上面所有数据源中
      # 初始化大小，最小，最大
      initial-size: 5
      min-idle: 5
      max-active: 20
      # 配置获取连接等待超时的时间
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      validation-query: SELECT 1 FROM DUAL
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: true

#指定Mapper映射文件的位置和Mapper接口位置
mybatis:
  # 扫描mapper.xml文件所在位置
  mapper-locations: classpath:mapper/**.xml
  # 配置别名映射
  type-aliases-package: com.code.pojo.*
  configuration:
    #开启驼峰映射
    map-underscore-to-camel-case: true
#如果没有整合logback日志，则需要单独将mapper接口的路径日志级别设置成debug
#这样才能打印出sql语句
logging:
  level:
    com.code: debug

eureka:
  instance:
    hostname: 127.0.0.1 #代表当前eureka主机地址
  client:
    service-url: # 客户端与EurekaServer交互的地址，如果是集群，需要写成其它Eureka服务的地址
      defaultZone: http://127.0.0.1:8091/eureka/,http://127.0.0.1:8092/eureka/
    #代表当前服务是否要注册到eureka中，true代表注册，false代表不注册，因为当前工程自己就是eureka工程服务，所以不需要注册
    register-with-eureka: true
    #代表当前服务是否要从eureka中获取服务，true代表获取，false代表不获取，因为当前工程自己就是eureka工程服务，所以不需要获取
    fetch-registry: true

ribbon:
  #请求处理超时时间（毫秒）
  ReadTimeout: 2000
  #是否对所有请求操作都进⾏重试
  OkToRetryOnAllOperations: true
  MaxAutoRetries: 1 #对当前选中实例重试次数，不包括第⼀次调⽤
  MaxAutoRetriesNextServer: 1 #切换实例的重试次数
  #定义ribbon负载均衡策略
  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule

code:
  timeout: 600